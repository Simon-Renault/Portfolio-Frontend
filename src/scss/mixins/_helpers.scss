// Media Queries
@mixin breakpoint($min-width: null, $min-height: null, $medium: screen) {
  @if ($min-width != null and $min-height != null) {
    @media #{$medium} and (min-width: $min-width) and (min-height: $min-height) {
      @content;
    }
  } @else
  if ($min-width != null and $min-height == null) {
    @media #{$medium} and (min-width: $min-width) {
      @content;
    }
  } @else
  if ($min-width == null and $min-height != null) {
    @media #{$medium} and (min-height: $min-height) {
      @content;
    }
  }
}



// Breakpoint-loop
// @include breakpoint-loop(width, (($medium, 80%), ($large, 50%)));
@mixin breakpoint-loop($element, $properties) {
    @each $property in $properties {
        $size: nth($property, 1);
        $value: nth($property, 2);

        @include breakpoint($size) {
            #{$element}: $value;
        }
    }
}


// Full stretching an item the size of it's parent.
// Remmeber that the parent can't have the position: static.
// otherwise this mixin won't work
@mixin full-absolute() {
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
};


/// helper mixins for flexbox
@mixin flex-h(){
  display:flex;
  flex-direction: row;
}
@mixin flex-v(){
  display:flex;
  flex-direction: column;
}



/// helper mixins for css grids
@mixin grid-col($num : 1,$gap : 20rem){
  display: grid;
  grid-gap : $gap;
  grid-template-columns: repeat($num,1fr);
}


/// background helpers
@mixin background-image($url,$size : contain,$position : top left){
  background-image: url($url);
  background-size: $size;
  background-position: $position;
  background-attachment: initial;
  background-repeat: no-repeat;
}

///helpers with position fixed


///helper mixin  for aspect ratios
@mixin aspect($ratio: 1 1, $selector: "> :first-child") {
	$selector: unquote($selector);

	padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1));
  position: relative;
  flex-grow: 0;

	#{$selector} {
		left: 0;
		height: 100%;
		position: absolute;
		top: 0;
		width: 100%;
	}
}

/// helper mixin to debug an element positioning
@mixin debug($color :  red, $width : 2px, $type : solid){
  border: $width $type $color
}